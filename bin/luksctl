#!/usr/bin/env python
"""
ELIXIR-ITALY
IBIOM-CNR

Contributors:
author: Tangaro Marco
email: ma.tangaro@ibiom.cnr.it
"""

# Imports
import sys, os
import argparse
import subprocess

try:
  import ConfigParser
except ImportError:
  import configparse

#______________________________________
# Custom libraries
from luksctl import __version__
from luksctl import LUKSCtl

#______________________________________
# read /etc/luks/luks-cryptdev.ini configuration file
def is_virtual():
  """
  Return if we run in a virtual environtment.
  Check supports venv && virtualenv
  """
  return (getattr(sys, 'base_prefix', sys.prefix) != sys.prefix or hasattr(sys, 'real_prefix'))

def find_ini_file(ini_file):
  path='/etc/luks'
  if is_virtual() is True: path = sys.prefix + path
  full_ini_file_path = path + '/' + ini_file
  return full_ini_file_path

luks_config_file = find_ini_file('luks-cryptdev.ini')

# Init luksct management object
luks = LUKSCtl(luks_config_file)

#______________________________________
def cli_options():
  parser = argparse.ArgumentParser(description='LUKS storage management script')
  parser.add_argument('-V', '--version', action='store_true', dest='version', default=False, help='Print luksctl version')

  subparsers = parser.add_subparsers()

  parser_volume = subparsers.add_parser('luks-volume')
  parser_volume.add_argument('volume_action', choices=['open','close','status'], nargs='?', help='LUKS volume available options')

  parser_header = subparsers.add_parser('luks-header')
  parser_header.add_argument('header_action', choices=['test-open','test-close','restore'], nargs='?', help='LUKS Header available  options')

  return parser.parse_args()

#______________________________________
def luksctl():

  if not os.geteuid() == 0:
    sys.exit('[Error] Script must be run as root.')

  options = cli_options()

  if options.version is True:
    print('Luksctl library: ' + __version__)
    return

  try:
    options.volume_action
  except AttributeError:
    options.volume_action = None
    pass

  try:
    options.header_action
  except AttributeError:
    options.header_action = None
    pass

  if options.volume_action is not None:

    if options.volume_action == "status": luks.display_dmsetup_info()

    elif options.volume_action == "open": luks.luksopen_device()

    elif options.volume_action == "close": luks.luksclose_device()

  elif options.header_action is not None:

    if options.header_action == "test-open": luks.luksheader_test_open()

    if options.header_action == "test-close": luks.luksheader_test_close()

    if options.header_action == "restore": luks.luksheader_restore()

#______________________________________
if __name__ == '__main__':
  luksctl()
